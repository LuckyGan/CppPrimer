class Base{
public:
	virtual int fcn():
};
class D1:public Base{
public:
	int fcn();
	virtual void f2();
};
class D2:public D1{
public:
	int fcn(int);
	int fcn();
	void f2();
};
Base bobj;D1 d1obj;D2 d2obj;
Base *bp1=&bobj,*bp2=&d1obj,*bp3=&d2obj;
bp1->fcn();//虚调用，将在运行时调用Base::fcn
bp2->fcn();//虚调用，将在运行时调用D1::fcn
bp3->fcn();//虚调用，将在运行时调用D2::fcn

D1 *d1p=&d1obj;D2 *d2p=&d2obj;
bp2->f2();//错误：Base没有名为f2的成员
d1p->f2();//虚调用，将在运行时调用D1::f2
d2p->f2();//虚调用，将在运行时调用D2::f2

Base *p1=&d2obj;D1 *p2=&d2obj;D2 *p3=&d2obj;
p1->fcn(42);//错误:Base中没有接受一个int的fcn
p2->fcn(42);//错误:D1、Base中没有接受一个int的fcn
p3->fcn(42);//静态绑定,调用D2::fcn(int)
